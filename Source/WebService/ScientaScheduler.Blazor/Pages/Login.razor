@page "/login"

@layout EmptyLayout
@inject IBusinessService businessService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<section class="vh-100">
    <div class="container-fluid  align-items-center h-100">
        <div class="d-flex row d-flex justify-content-center align-items-center h-100">
            <div class="col-md-6 col-lg-4" style="height:auto">
                <SfCard CssClass="LoginImage">
                    <CardImage Image="/img/Fingerprint-bro.png" />
                    <CardStacked>
                        <CardHeader Title="Kullanıcı Girişi" />
                        <CardContent>
                            <EditForm Model="userLoginRequest" OnValidSubmit="UserLogin">
                                <div class="d-flex row align-content-center align-items-center justify-content-center">
                                    <div class="col-xs-12 col-sm-8 col-md-8">
                                        <SfTextBox Placeholder="Kullanıcı Adı" CssClass="mb-2"></SfTextBox>
                                        <SfTextBox Placeholder="Şifre" Type="InputType.Password" CssClass="mb-2"></SfTextBox>
                                        <SfProgressButton CssClass="e-primary" class="btn btn-block mb-5" style="width:100%" Content="Giriş"/>
                                        @if (!loginResponse.IsSuccess)
                                        {
                                            <p>@loginResponse.ErrorMessage</p>
                                        }                                        
                                    </div>
                                </div>
                            </EditForm>
                        </CardContent>
                    </CardStacked>
                </SfCard>
            </div>
        </div>
    </div>
</section>

<style>
    .e-card .e-card-header .e-card-header-caption .e-card-header-title {
        font-weight: bold;
    }

    .LoginImage {
        text-align: center
    }

        .LoginImage > .e-card-image {
            margin: auto;
            width: 300px;
            height: 300px;
            min-height: 200px;
        }
</style>


@code {

    private UserLoginRequestDTO userLoginRequest = new UserLoginRequestDTO();

    private UserLoginResponse loginResponse { get; set; } = new();

    private async Task UserLogin()
    {
        userLoginRequest = new UserLoginRequestDTO { UserName = "blg", Password = "1" };
        var loginResult = await businessService.UserLogin(userLoginRequest);
        loginResponse.IsSuccess = loginResult.IsSuccess;
        loginResponse.Token = loginResult.Token;
        loginResponse.ErrorMessage = loginResult.ErrorMessage;
        if (loginResponse.IsSuccess)
        {
            await localStorage.SetItemAsync("token", loginResponse.Token);
            await (AuthenticationStateProvider as AuthStateProvider)!.NotifyUserLogin();            
            navigationManager.NavigateTo("/");
        }
        StateHasChanged();
    }

}