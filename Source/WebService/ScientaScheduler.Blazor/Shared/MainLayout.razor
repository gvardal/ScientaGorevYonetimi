@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient client
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>ScientaScheduler.Blazor</PageTitle>

<AuthorizeView>
    <Authorized>

        <div class="page">
            <SideBar SidebarToggle="SidebarToggle" LoggedUser="@loginStr" />
            <main>
                <SfAppBar ColorMode="AppBarColor.Primary">
                    <SfButton CssClass="e-inherit" IconCss="e-icons e-menu" OnClick="@ToggleMenu"></SfButton>
                    <AppBarSpacer></AppBarSpacer>
                    <SfButton CssClass="e-inherit" IconCss="oi oi-account-logout" OnClick="@UserLogOut"></SfButton>
                </SfAppBar>
                <article class="content px-2">
                    @Body
                </article>
            </main>
        </div>

    </Authorized>
</AuthorizeView>

@code {
    public string loginStr { get; set; } = string.Empty;

    [CascadingParameter]
    public Task<AuthenticationState> AuthSate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthSate;
        if (authState.User.Identity!.IsAuthenticated)
        {
            loginStr = authState.User.Claims.Where(x => x.Type == "userFullName").First().Value;
            StateHasChanged();
        }
        else
        {
            navigationManager.NavigateTo("login");
        }
    }



    private bool SidebarToggle = false;
    private void ToggleMenu()
    {
        SidebarToggle = !SidebarToggle;
        StateHasChanged();
    }

    private async Task UserLogOut()
    {
        await localStorage.RemoveItemAsync("token");
        (AuthenticationStateProvider as AuthStateProvider)!.NotifyUserLogout();
        client.DefaultRequestHeaders.Authorization = null;
        navigationManager.NavigateTo("login");
    }
}
